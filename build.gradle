/*
 * Copyright 2016, Lars Winderling
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.jfrog.bintray" version "1.6"
}

group 'com.github.kahalemakai'
version '0.3.9'

def license = "Apache-2.0"
def github = "https://github.com"
def githubUsername = "kaHaleMaKai"
def delombokedDir = "${buildDir}/src-delomboked"
def log4jVersion = "1.2.17"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
        ipr {
            withXml { provider ->
                // Get XML as groovy.util.Node to work with.
                def projectXml = provider.asNode()
                // Find compiler configuration component.
                def compilerConfiguration = projectXml.component.find { component ->
                    component.'@name' == 'CompilerConfiguration'
                }
                // Replace current annotationProcessing
                // that is part of the compiler configuration.
                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
                currentAnnotationProcessing.replaceNode {
                    annotationProcessing {
                        profile(name: 'Default', default: true, enabled: true) {
                            processorPath(useClasspath: true)
                        }
                    }
                }
            }
        }
    }
    module {
        jdkName = '1.8'
        downloadJavadoc = true
        downloadSources = false
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url "file://${System.getProperty("user.home")}/.m2/repository" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://nexus.pmd.local:8081/nexus/content/groups/PIA_Private/" }
    maven { url "http://nexus.pmd.local:8081/nexus/content/groups/public/" }
    maven { url "https://repository.jboss.org/nexus/content/groups/public" }
}

dependencies {
    compile "org.projectlombok:lombok:1.16.10"
    compile "log4j:log4j:${log4jVersion}"
    compile "log4j:apache-log4j-extras:${log4jVersion}"
    compile 'com.opencsv:opencsv:3.8'
    compile 'com.github.kahalemakai:tuples:0.3.0'

    compile(group: 'com.intellij', name: 'annotations', version: '12.0') {
        exclude group: "com.intellij"
    }
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

configurations.compile.transitive = true

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

task delombok << {
    description 'Delomboks the source code'
    ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compile.asPath, name: 'delombok')
    ant.mkdir(dir: delombokedDir)
    ant.delombok(verbose: 'true', encoding: 'UTF-8', to: delombokedDir, from: 'src/main/java')
}

task javadocDelux(type: Javadoc, group: "documentation") {
    dependsOn delombok
    source delombokedDir
}

jacocoTestReport {
    dependsOn delombok
    additionalSourceDirs = files(delombokedDir)
    reports {
        xml.enabled true
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadocDelux
    dependsOn javadocDelux
}

task sourcesJar(type: Jar) {
    dependsOn classes
    classifier = 'sources'
    from sourceSets.main.allSource
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xdiags:verbose"
    }
}

task cleanTests(group: "verification") {
    dependsOn cleanTest
}

defaultTasks 'clean', 'test', 'build'

publishing {
    publications {
        opencsv(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            groupId rootProject.group
            artifactId rootProject.name
            version rootProject.version
        }
    }
}

test {
    useJUnit {
        excludeCategories "com.github.kahalemakai.opencsv.categories.PerformanceTests"
    }
}

task performanceTest(type: Test, group: "verification") {
    useJUnit {
        includeCategories "com.github.kahalemakai.opencsv.categories.PerformanceTests"
    }
}

bintray {
    user = rootProject.hasProperty("bintrayUser") ? bintrayUser : ""
    key = rootProject.hasProperty("bintrayApiKey") ? bintrayApiKey : ""
    publications = [rootProject.name]
    pkg {
        repo = 'maven'
        name = rootProject.name
        licenses = [license]
        vcsUrl = "${github}/${githubUsername}/${rootProject.name}"

        githubRepo = "${githubUsername}/${rootProject.name}"
        githubReleaseNotesFile = 'README.md'

        publicDownloadNumbers = true

        version {
            name = rootProject.version
            desc = "add apache2 license"
            released = new Date()
            vcsTag = rootProject.version

            gpg {
                sign = true
                passphrase = hasProperty("gpgPassPhrase") ? gpgPassPhrase : ""
            }
        }
    }
}
